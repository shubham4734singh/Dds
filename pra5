#include <stdio.h>
#include <stdlib.h>
#define MAX 100
typedef struct Queue {
 int items[MAX];
 int front;
 int rear;
} Queue;
void createQueue(Queue *q) {
 q->front = -1;
 q->rear = -1;
}
int isFull(Queue *q) {
 return q->rear == MAX - 1;
}
int isEmpty(Queue *q) {
 return q->front == -1 || q->front > q->rear;
}
void enqueue(Queue *q, int item) {
 if (isFull(q)) {
 printf("Queue is full\n");
 } else {
 if (q->front == -1) {
 q->front = 0;
 }
 q->items[++q->rear] = item;
 printf("Item %d enqueued to queue\n", item);
 }
}
int dequeue(Queue *q) {
 if (isEmpty(q)) {
 printf("Queue is empty\n");
 return -1;
 } else {
 int item = q->items[q->front++];
 if (q->front > q->rear) {
 q->front = q->rear = -1;
 }
 printf("Item %d dequeued from queue\n", item);
 return item;
 }
}
void traverse(Queue *q) {
 if (isEmpty(q)) {
 printf("Queue is empty\n");
 } else {
 printf("Queue elements:\n");
 for (int i = q->front; i <= q->rear; i++) {
 printf("%d\n", q->items[i]);
 }
 }
}
int search(Queue *q, int item) {
 if (isEmpty(q)) {
 printf("Queue is empty\n");
 return -1;
 } else {
 for (int i = q->front; i <= q->rear; i++) {
 if (q->items[i] == item) {
 printf("Item %d found at position %d\n", item, i - q->front);
 return i - q->front;
 }
 }
 printf("Item %d not found in queue\n", item);
 return -1;
 }
}
int main() {
 Queue q;
 createQueue(&q);
 enqueue(&q, 1);
 enqueue(&q, 2);
 enqueue(&q, 3);
 traverse(&q);
 dequeue(&q);
 traverse(&q);
 search(&q, 2);
 search(&q, 4);
 dequeue(&q);
 dequeue(&q);
 dequeue(&q);
 traverse(&q);
 return 0;
}
