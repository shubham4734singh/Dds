#include <stdio.h>
#include <stdlib.h>
#define MAX 100
// Structure for adjacency list node
struct Node {
 int vertex;
 struct Node* next;
};
// Structure for adjacency list
struct AdjList {
 struct Node* head;
};
// Structure for graph using adjacency list
struct GraphList {
 int numVertices;
 struct AdjList* array;
};
// Create a node in adjacency list
struct Node* createNode(int v) {
 struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
 newNode->vertex = v;
 newNode->next = NULL;
 return newNode;
}
// Create a graph using adjacency list
struct GraphList* createGraphList(int vertices) {
 struct GraphList* graph = (struct GraphList*)malloc(sizeof(struct GraphList));
 graph->numVertices = vertices;
 graph->array = (struct AdjList*)malloc(vertices * sizeof(struct AdjList));
 for (int i = 0; i < vertices; i++) {
 graph->array[i].head = NULL;
 }
 return graph;
}
// Add edge to adjacency list graph
void addEdgeList(struct GraphList* graph, int src, int dest) {
 // Add edge from src to dest
 struct Node* newNode = createNode(dest);
 newNode->next = graph->array[src].head;
 graph->array[src].head = newNode;
 // Add edge from dest to src (undirected graph)
 newNode = createNode(src);
 newNode->next = graph->array[dest].head;
 graph->array[dest].head = newNode;
}
// Display adjacency list graph
void displayGraphList(struct GraphList* graph) {
 for (int v = 0; v < graph->numVertices; v++) {
 struct Node* temp = graph->array[v].head;
 printf("\n Vertex %d\n: ", v);
 while (temp) {
 printf("%d -> ", temp->vertex);
 temp = temp->next;
 }
 printf("NULL\n");
 }
}
// BFS using adjacency list
void bfsList(struct GraphList* graph, int startVertex) {
 int visited[MAX] = {0};
 int queue[MAX];
 int front = 0, rear = 0;
 visited[startVertex] = 1;
 queue[rear++] = startVertex;
 while (front != rear) {
 int currentVertex = queue[front++];
 printf("%d ", currentVertex);
 struct Node* temp = graph->array[currentVertex].head;
 while (temp) {
 int adjVertex = temp->vertex;
 if (!visited[adjVertex]) {
 visited[adjVertex] = 1;
 queue[rear++] = adjVertex;
 }
 temp = temp->next;
 }
 }
}
// DFS using adjacency list
void dfsListHelper(struct GraphList* graph, int vertex, int visited[]) {
 visited[vertex] = 1;
 printf("%d ", vertex);
 struct Node* temp = graph->array[vertex].head;
 while (temp) {
 int adjVertex = temp->vertex;
 if (!visited[adjVertex]) {
 dfsListHelper(graph, adjVertex, visited);
 }
 temp = temp->next;
 }
}
void dfsList(struct GraphList* graph, int startVertex) {
 int visited[MAX] = {0};
 dfsListHelper(graph, startVertex, visited);
}
// Graph structure using adjacency matrix
struct GraphMatrix {
 int numVertices;
 int adjMatrix[MAX][MAX];
};
// Create graph using adjacency matrix
struct GraphMatrix* createGraphMatrix(int vertices) {
 struct GraphMatrix* graph = (struct GraphMatrix*)malloc(sizeof(struct 
GraphMatrix));
 graph->numVertices = vertices;
 for (int i = 0; i < vertices; i++) {
 for (int j = 0; j < vertices; j++) {
 graph->adjMatrix[i][j] = 0;
 }
 }
 return graph;
}
// Add edge to adjacency matrix graph
void addEdgeMatrix(struct GraphMatrix* graph, int src, int dest) {
 graph->adjMatrix[src][dest] = 1;
 graph->adjMatrix[dest][src] = 1; // Since it's undirected
}
// Display adjacency matrix
void displayGraphMatrix(struct GraphMatrix* graph) {
 for (int i = 0; i < graph->numVertices; i++) {
 for (int j = 0; j < graph->numVertices; j++) {
 printf("%d ", graph->adjMatrix[i][j]);
 }
 printf("\n");
 }
}
// BFS using adjacency matrix
void bfsMatrix(struct GraphMatrix* graph, int startVertex) {
 int visited[MAX] = {0};
 int queue[MAX];
 int front = 0, rear = 0;
 visited[startVertex] = 1;
 queue[rear++] = startVertex;
 while (front != rear) {
 int currentVertex = queue[front++];
 printf("%d ", currentVertex);
 for (int i = 0; i < graph->numVertices; i++) {
 if (graph->adjMatrix[currentVertex][i] == 1 && !visited[i]) {
 visited[i] = 1;
 queue[rear++] = i;
 }
 }
 }
}
// DFS using adjacency matrix
void dfsMatrixHelper(struct GraphMatrix* graph, int vertex, int visited[]) {
 visited[vertex] = 1;
 printf("%d ", vertex);
 for (int i = 0; i < graph->numVertices; i++) {
 if (graph->adjMatrix[vertex][i] == 1 && !visited[i]) {
 dfsMatrixHelper(graph, i, visited);
 }
 }
}
void dfsMatrix(struct GraphMatrix* graph, int startVertex) {
 int visited[MAX] = {0};
 dfsMatrixHelper(graph, startVertex, visited);
}
// Main function
int main() {
 int vertices = 5;
 // Graph using adjacency list
 struct GraphList* graphList = createGraphList(vertices);
 addEdgeList(graphList, 0, 1);
 addEdgeList(graphList, 0, 4);
 addEdgeList(graphList, 1, 2);
 addEdgeList(graphList, 1, 3);
 addEdgeList(graphList, 1, 4);
 addEdgeList(graphList, 2, 3);
 addEdgeList(graphList, 3, 4);
 printf("Graph represented using Adjacency List:\n");
 displayGraphList(graphList);
 printf("\nBFS (Adjacency List): ");
 bfsList(graphList, 0);
 printf("\nDFS (Adjacency List): ");
 dfsList(graphList, 0);
 printf("\n");
 // Graph using adjacency matrix
 struct GraphMatrix* graphMatrix = createGraphMatrix(vertices);
 addEdgeMatrix(graphMatrix, 0, 1);
 addEdgeMatrix(graphMatrix, 0, 4);
 addEdgeMatrix(graphMatrix, 1, 2);
 addEdgeMatrix(graphMatrix, 1, 3);
 addEdgeMatrix(graphMatrix, 1, 4);
 addEdgeMatrix(graphMatrix, 2, 3);
 addEdgeMatrix(graphMatrix, 3, 4);
 printf("\nGraph represented using Adjacency Matrix:\n");
 displayGraphMatrix(graphMatrix);
 printf("\nBFS (Adjacency Matrix): ");
 bfsMatrix(graphMatrix, 0);
 printf("\nDFS (Adjacency Matrix): ");
 dfsMatrix(graphMatrix, 0);
 return 0;
}
