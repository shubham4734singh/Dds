#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <math.h>
#define MAX 100
typedef struct Stack {
 int top;
 int items[MAX];
} Stack;
void createStack(Stack *s) {
 s->top = -1;
}
int isFull(Stack *s) {
 return s->top == MAX - 1;
}
int isEmpty(Stack *s) {
 return s->top == -1;
}
void push(Stack *s, int item) {
 if (isFull(s)) {
 printf("Stack is full\n");
 } else {
 s->items[++s->top] = item;
 }
}
int pop(Stack *s) {
 if (isEmpty(s)) {
 printf("Stack is empty\n");
 return -1;
 } else {
 return s->items[s->top--];
 }
}
int evaluatePostfix(char postfix[]) {
 Stack s;
 createStack(&s);
 int i = 0;
 while (postfix[i] != '\0') {
 char ch = postfix[i];
 
 if (isdigit(ch)) {
 push(&s, ch - '0');
 } else {
 int val2 = pop(&s);
 int val1 = pop(&s);
 
 switch (ch) {
 case '+': push(&s, val1 + val2); break;
 case '-': push(&s, val1 - val2); break;
 case '*': push(&s, val1 * val2); break;
 case '/': push(&s, val1 / val2); break;
 case '^': push(&s, pow(val1, val2)); break;
 default: printf("Invalid operator encountered\n"); return -1;
 }
 }
 i++;
 }
 return pop(&s);
}
int main() {
 char postfix[MAX];
 printf("Enter a postfix expression: ");
 scanf("%s", postfix);
 int result = evaluatePostfix(postfix);
 printf("Result of postfix evaluation: %d\n", result);
 return 0;
}
