#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#define MAX 100
typedef struct Stack {
 int top;
 char items[MAX];
} Stack;
void createStack(Stack *s) {
 s->top = -1;
}
int isFull(Stack *s) {
 return s->top == MAX - 1;
}
int isEmpty(Stack *s) {
 return s->top == -1;
}
void push(Stack *s, char item) {
 if (isFull(s)) {
 printf("Stack is full\n");
 } else {
 s->items[++s->top] = item;
 }
}
char pop(Stack *s) {
 if (isEmpty(s)) {
 printf("Stack is empty\n");
return -1;

 } else {

 return s->items[s->top--];

 }

}

char peek(Stack *s) {

 if (isEmpty(s)) {

 return -1;

 } else {

 return s->items[s->top];

 }

}

int precedence(char op) {

 switch (op) {

 case '+':

 case '-':

 return 1;

 case '*':

 case '/':

 return 2;

 case '^':

 return 3;

 default:

 return 0;

 }

}

int isOperator(char ch) {

 return ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '^';

}

void infixToPostfix(char infix[], char postfix[]) {

 Stack s;

 createStack(&s);

 int k = 0;

 for (int i = 0; infix[i] != '\0'; i++) {

 char ch = infix[i];

 if (isalnum(ch)) {

 postfix[k++] = ch;

 } else if (ch == '(') {

 push(&s, ch);
} else if (ch == ')') {

 while (!isEmpty(&s) && peek(&s) != '(') {

 postfix[k++] = pop(&s);

 }

 pop(&s); // Remove '(' from stack

 } else if (isOperator(ch)) {

 while (!isEmpty(&s) && precedence(peek(&s)) >= precedence(ch)) {

 postfix[k++] = pop(&s);

 }

 push(&s, ch);

 }

 }

 while (!isEmpty(&s)) {

 postfix[k++] = pop(&s);

 }

 postfix[k] = '\0';

}

int main() {

 char infix[MAX], postfix[MAX];

 printf("Enter an infix expression: ");

 scanf("%s", infix);

 infixToPostfix(infix, postfix);

 printf("Postfix expression: %s\n", postfix);

 return 0;

}
