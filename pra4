#include <stdio.h>
#include <stdlib.h>
#define MAX 100
typedef struct Stack {
 int top;
 int items[MAX];
} Stack;
void createStack(Stack *s) {
 s->top = -1;
}
int isFull(Stack *s) {
 return s->top == MAX - 1;
}
int isEmpty(Stack *s) {
 return s->top == -1;
}
void push(Stack *s, int item) {
 if (isFull(s)) {
 printf("Stack is full\n");
 } else {
 s->items[++s->top] = item;
 }
}
int pop(Stack *s) {
 if (isEmpty(s)) {
 printf("Stack is empty\n");
 return -1;
 } else {
 return s->items[s->top--];
 }
}
void moveDisk(Stack *source, Stack *dest, char s, char d) {
 int pole1TopDisk = pop(source);
 int pole2TopDisk = pop(dest);
 if (pole1TopDisk == -1) {
 push(source, pole2TopDisk);
 printf("Move disk %d from %c to %c\n", pole2TopDisk, d, s);
 } else if (pole2TopDisk == -1) {
 push(dest, pole1TopDisk);
 printf("Move disk %d from %c to %c\n", pole1TopDisk, s, d);
 } else if (pole1TopDisk > pole2TopDisk) {
 push(source, pole1TopDisk);
 push(source, pole2TopDisk);
 printf("Move disk %d from %c to %c\n", pole2TopDisk, d, s);
 } else {
 push(dest, pole2TopDisk);
 push(dest, pole1TopDisk);
 printf("Move disk %d from %c to %c\n", pole1TopDisk, s, d);
 }
}
void moveDisksBetweenTwoPoles(Stack *src, Stack *dest, char s, char d) {
 moveDisk(src, dest, s, d);
}
void tohIterative(int num_of_disks, Stack *src, Stack *aux, Stack *dest) {
 int total_num_of_moves;
 char s = 'S', d = 'D', a = 'A';
 if (num_of_disks % 2 == 0) {
 char temp = d;
 d = a;
 a = temp;
 }
 total_num_of_moves = (1 << num_of_disks) - 1; // 2^n - 1
 for (int i = num_of_disks; i >= 1; i--)
 push(src, i);
 for (int i = 1; i <= total_num_of_moves; i++) {
 if (i % 3 == 1)
 moveDisksBetweenTwoPoles(src, dest, s, d);
 else if (i % 3 == 2)
 moveDisksBetweenTwoPoles(src, aux, s, a);
 else if (i % 3 == 0)
 moveDisksBetweenTwoPoles(aux, dest, a, d);
 }
}
int main() {
 Stack src, dest, aux;
 createStack(&src);
 createStack(&dest);
 createStack(&aux);
 int num_of_disks;
 printf("Enter the number of disks: ");
 scanf("%d", &num_of_disks);
 tohIterative(num_of_disks, &src, &aux, &dest);
 return 0;
}
