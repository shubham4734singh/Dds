#include <stdio.h>
// Function for binary search
int binarySearch(int arr[], int left, int right, int key) {
 while (left <= right) {
 int mid = left + (right - left) / 2;
 // Check if the key is present at mid
 if (arr[mid] == key)
 return mid;
 // If the key is greater, ignore the left half
 if (arr[mid] < key)
 left = mid + 1;
 // If the key is smaller, ignore the right half
 else
 right = mid - 1;
 }
 // If the key is not present in the array
 return -1;
}
int main() {
 int arr[] = {2, 3, 4, 10, 40};
 int n = sizeof(arr) / sizeof(arr[0]);
 int key = 10;
 int result = binarySearch(arr, 0, n - 1, key);
 if (result == -1)
 printf("Element is not present in array\n");
 else
 printf("Element is present at index %d\n", result);
 return 0;
}
#include <stdio.h>
// Function for interpolation search
int interpolationSearch(int arr[], int n, int key) {
 int low = 0, high = n - 1;
 while (low <= high && key >= arr[low] && key <= arr[high]) {
 if (low == high) {
 if (arr[low] == key)
 return low;
 return -1;
 }
 // Probing the position with keeping uniform distribution in mind
 int pos = low + ((double)(high - low) / (arr[high] - arr[low]) * (key - arr[low]));
 // Condition of target found
 if (arr[pos] == key)
 return pos;
 // If key is larger, key is in upper part
 if (arr[pos] < key)
 low = pos + 1;
 // If key is smaller, key is in lower part
 else
 high = pos - 1;
 }
 return -1;
}
int main() {
 int arr[] = {10, 12, 13, 16, 18, 19, 20, 21, 22, 23, 24, 33, 35, 42, 47};
 int n = sizeof(arr) / sizeof(arr[0]);
 int key = 18;
 int result = interpolationSearch(arr, n, key);
 if (result == -1)
 printf("Element is not present in array\n");
 else
 printf("Element is present at index %d\n", result);
 return 0;
}
