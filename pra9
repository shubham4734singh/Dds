#include <stdio.h>
// Function for binary search
int binarySearch(int arr[], int left, int right, int key) {
 while (left <= right) {
 int mid = left + (right - left) / 2;
 // Check if the key is present at mid
 if (arr[mid] == key)
 return mid;
 // If the key is greater, ignore the left half
 if (arr[mid] < key)
 left = mid + 1;
 // If the key is smaller, ignore the right half
 else
 right = mid - 1;
 }
 // If the key is not present in the array
 return -1;
}
int main() {
 int arr[] = {2, 3, 4, 10, 40};
 int n = sizeof(arr) / sizeof(arr[0]);
 int key = 10;
 int result = binarySearch(arr, 0, n - 1, key);
 if (result == -1)
 printf("Element is not present in array\n");
 else
 printf("Element is present at index %d\n", result);
 return 0;
}
#include <stdio.h>
// Function for interpolation search
int interpolationSearch(int arr[], int n, int key) {
 int low = 0, high = n - 1;
 while (low <= high && key >= arr[low] && key <= arr[high]) {
 if (low == high) {
 if (arr[low] == key)
 return low;
 return -1;
 }
 // Probing the position with keeping uniform distribution in mind
 int pos = low + ((double)(high - low) / (arr[high] - arr[low]) * (key - arr[low]));
 // Condition of target found
 if (arr[pos] == key)
 return pos;
 // If key is larger, key is in upper part
 if (arr[pos] < key)
 low = pos + 1;
 // If key is smaller, key is in lower part
 else
 high = pos - 1;
 }
 return -1;
}
int main() {
 int arr[] = {10, 12, 13, 16, 18, 19, 20, 21, 22, 23, 24, 33, 35, 42, 47};
 int n = sizeof(arr) / sizeof(arr[0]);
 int key = 18;
 int result = interpolationSearch(arr, n, key);
 if (result == -1)
 printf("Element is not present in array\n");
 else
 printf("Element is present at index %d\n", result);
 return 0;
}
Implement Bubble sort, selection sort, Insertion sort, quick sort ,merge sort.
#include <stdio.h>
void bubbleSort(int arr[], int n) {
 for (int i = 0; i < n - 1; i++) {
 for (int j = 0; j < n - i - 1; j++) {
 if (arr[j] > arr[j + 1]) {
 int temp = arr[j];
 arr[j] = arr[j + 1];
 arr[j + 1] = temp;
 }
 }
 }
}
void printArray(int arr[], int size) {
 for (int i = 0; i < size; i++) {
 printf("%d ", arr[i]);
 }
 printf("\n");
}
int main() {
 int arr[] = {64, 34, 25, 12, 22, 11, 90};
 int n = sizeof(arr) / sizeof(arr[0]);
 bubbleSort(arr, n);
 printf("Sorted array: \n");
 printArray(arr, n);
 return 0;
}
#include <stdio.h>
void selectionSort(int arr[], int n) {
 for (int i = 0; i < n - 1; i++) {
 int min_idx = i;
 for (int j = i + 1; j < n; j++) {
 if (arr[j] < arr[min_idx]) {
 min_idx = j;
 }
 }
 int temp = arr[min_idx];
 arr[min_idx] = arr[i];
 arr[i] = temp;
 }
}
void printArray(int arr[], int size) {
 for (int i = 0; i < size; i++) {
 printf("%d ", arr[i]);
 }
 printf("\n");
}
int main() {
 int arr[] = {64, 25, 12, 22, 11};
 int n = sizeof(arr) / sizeof(arr[0]);
 selectionSort(arr, n);
 printf("Sorted array: \n");
 printArray(arr, n);
 return 0;
}
#include <stdio.h>
void insertionSort(int arr[], int n) {
 for (int i = 1; i < n; i++) {
 int key = arr[i];
 int j = i - 1;
 while (j >= 0 && arr[j] > key) {
 arr[j + 1] = arr[j];
 j = j - 1;
 }
 arr[j + 1] = key;
 }
}
void printArray(int arr[], int size) {
 for (int i = 0; i < size; i++) {
 printf("%d ", arr[i]);
 }
 printf("\n");
}
int main() {
 int arr[] = {12, 11, 13, 5, 6};
 int n = sizeof(arr) / sizeof(arr[0]);
 insertionSort(arr, n);
 printf("Sorted array: \n");
 printArray(arr, n);
 return 0;
}
#include <stdio.h>
void swap(int* a, int* b) {
 int t = *a;
 *a = *b;
 *b = t;
}
int partition(int arr[], int low, int high) {
 int pivot = arr[high];
 int i = (low - 1);
 for (int j = low; j <= high - 1; j++) {
 if (arr[j] < pivot) {
 i++;
 swap(&arr[i], &arr[j]);
 }
 }
 swap(&arr[i + 1], &arr[high]);
 return (i + 1);
}
void quickSort(int arr[], int low, int high) {
 if (low < high) {
 int pi = partition(arr, low, high);
 quickSort(arr, low, pi - 1);
 quickSort(arr, pi + 1, high);
 }
}
void printArray(int arr[], int size) {
 for (int i = 0; i < size; i++) {
 printf("%d ", arr[i]);
 }
 printf("\n");
}
int main() {
 int arr[] = {10, 7, 8, 9, 1, 5};
 int n = sizeof(arr) / sizeof(arr[0]);
 quickSort(arr, 0, n - 1);
 printf("Sorted array: \n");
 printArray(arr, n);
 return 0;
}
#include <stdio.h>
#include <stdlib.h>
void merge(int arr[], int l, int m, int r) {
 int i, j, k;
 int n1 = m - l + 1;
 int n2 = r - m;
 int L[n1], R[n2];
 for (i = 0; i < n1; i++)
 L[i] = arr[l + i];
 for (j = 0; j < n2; j++)
 R[j] = arr[m + 1 + j];
 i = 0;
 j = 0;
 k = l;
 while (i < n1 && j < n2) {
 if (L[i] <= R[j]) {
 arr[k] = L[i];
 i++;
 } else {
 arr[k] = R[j];
 j++;
 }
 k++;
 }
 while (i < n1) {
 arr[k] = L[i];
 i++;
 k++;
 }
 while (j < n2) {
 arr[k] = R[j];
 j++;
 k++;
 }
}
void mergeSort(int arr[], int l, int r) {
 if (l < r) {
 int m = l + (r - l) / 2;
 mergeSort(arr, l, m);
 mergeSort(arr, m + 1, r);
 merge(arr, l, m, r);
 }
}
void printArray(int arr[], int size) {
 for (int i = 0; i < size; i++) {
 printf("%d ", arr[i]);
 }
 printf("\n");
}
int main() {
 int arr[] = {12, 11, 13, 5, 6, 7};
 int arr_size = sizeof(arr) / sizeof(arr[0]);
 printf("Given array is \n");
 printArray(arr, arr_size);
 mergeSort(arr, 0, arr_size - 1);
 printf("\nSorted array is \n");
 printArray(arr, arr_size);
 return 0;
}
